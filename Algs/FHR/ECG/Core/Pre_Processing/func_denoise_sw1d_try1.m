function [sigDEN, wDEC] = func_denoise_sw1d_try1(SIG)
%#codegen

% FUNC_DENOISE_SW1D Saved Denoising Process.
%   SIG: vector of data
%   -------------------
%   sigDEN: vector of denoised data
%   wDEC: stationary wavelet decomposition

%  Auto-generated by Wavelet Toolbox on 22-Dec-2014 11:51:39

% Analysis parameters.
%---------------------
wname = 'sym7';
level = 6;
pow = 2^level;
s = length(SIG);
if(rem(s,pow)>0)
    str = ['The length of the signal is not compatable with the decomp level',...
           'Padding the signal before the decomp'];
%     warning(str);
    val = SIG(end);
    SIG = [SIG ones(1, ceil(s/pow)*pow - s)*val];
end


% Denoising parameters.
%----------------------
% meth = 'sqtwolog';
% scal_OR_alfa = mln;
sorh = 's';    % Specified soft or hard thresholding
thrSettings =  [...
    [ 1  s      0.000005742043918; ]; ...
    [ 1  s      0.000661034601332; ]; ...
    [ 1  s      0.023797648418007; ]; ...
    [ 1  s      0.016369179915959; ]; ...
    [ 1  s      0.024644473321740; ]; ...
    [ 1  s      0.016510837624081; ]; ...
    ];

% Decompose using SWT.
%---------------------
wDEC = swt(SIG,level,wname);

% Denoise.
%---------
len = length(SIG);
for k = 1:level
    thr_par = thrSettings(k, :);
    if ~isempty(thr_par)
        NB_int = size(thr_par,1);
        x      = [thr_par(:,1) ; thr_par(NB_int,2)];
        x      = round(x);
        x(x<1) = 1;
        x(x>len) = len;
        thr = thr_par(:,3);
        for j = 1:NB_int
            if j==1 , d_beg = 0; else d_beg = 1; end
            j_beg = x(j)+d_beg;
            j_end = x(j+1);
            j_ind = (j_beg:j_end);
            wDEC(k,j_ind) = wthresh(wDEC(k,j_ind),sorh,thr(j));
        end
    end
end

% Reconstruct the denoise signal using ISWT.
%-------------------------------------------
sigDEN = iswt(wDEC,wname);
sigDEN = sigDEN(1:s);